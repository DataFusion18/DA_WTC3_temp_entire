#     theme(legend.text = element_text(colour="black", size = font.size)) +
#     theme(legend.position = c(0.17,0.7)) +
#     theme(legend.key = element_blank()) +
#     theme(text = element_text(size=font.size)) +
#     theme(axis.title.x = element_blank()) +
#     theme(axis.title.y = element_text(size = font.size, vjust=0.3)) +
#     theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
#     ylab(expression(S[leaf]~"(% of"~M[leaf]~")")) + guides(colour=FALSE)
# }
#
# png("output/Figure_5_modelled_biomass_Sleaf_conc.png", units="px", width=2200, height=1600, res=220)
# print (do.call(grid.arrange,  plot))
# dev.off()
# # #----------------------------------------------------------------------------------------------------------------
}
#-------------------------------------------------------------------------------------
# Read data
treat.group = as.factor(c("ambient","elevated")) # Assign all treatments
data.all = read.csv("processed_data/data_all.csv")
tnc.partitioning = read.csv("processed_data/tnc_partitioning_data.csv")
data.all[,c("TNC_tot_SE","TNC_leaf_SE","TNC_wood_SE","TNC_root_SE")] = 3 * data.all[,c("TNC_tot_SE","TNC_leaf_SE","TNC_wood_SE","TNC_root_SE")]
# inputs
no.param.par.var = 9
with.storage = T
model.comparison = F
model.optimization = F
param.vary = ceiling(nrow(data.all)/2/no.param.par.var)
no.param = ceiling(nrow(data.all)/2/param.vary)
# Setting parameters values
param.1.k <- matrix(c(0.2,0.2,0.2,0.2,0.25,0.1,0.08,0.1,0.15) , nrow=no.param, ncol=1, byrow=T)
param.1.Y <- matrix(c(0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3) , nrow=no.param, ncol=1, byrow=T)
param.1.af <- matrix(c(0.3,0.25,0.25,0.2,0.2,0.2,0.2,0.15,0.05) , nrow=no.param, ncol=1, byrow=T)
param.1.as <- matrix(c(0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.7,0.75) , nrow=no.param, ncol=1, byrow=T)
param.1.sf <- matrix(c(0.00075,0.00075,0.00075,0.00075,0.0005,0.0005,0.00025,0.00025,0.00025) , nrow=no.param, ncol=1, byrow=T)
param.1.sr <- matrix(c(0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001) , nrow=no.param, ncol=1, byrow=T)
param.1 = data.frame(param.1.k,param.1.Y,param.1.af,param.1.as,param.1.sf,param.1.sr)
names(param.1) <- c("k","Y","af","as","sf","sr")
param.2.k <- matrix(c(0.2,0.2,0.15,0.1,0.2,0.05,0.05,0.1,0.15) , nrow=no.param, ncol=1, byrow=T)
param.2.Y <- matrix(c(0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3) , nrow=no.param, ncol=1, byrow=T)
param.2.af <- matrix(c(0.3,0.3,0.3,0.25,0.25,0.15,0.15,0.1,0.025) , nrow=no.param, ncol=1, byrow=T)
param.2.as <- matrix(c(0.6,0.6,0.65,0.7,0.7,0.75,0.75,0.7,0.7) , nrow=no.param, ncol=1, byrow=T)
param.2.sf <- matrix(c(0.00075,0.0005,0.0005,0.0005,0.00075,0.00075,0.00095,0.00095,0.00095) , nrow=no.param, ncol=1, byrow=T)
param.2.sr <- matrix(c(0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001) , nrow=no.param, ncol=1, byrow=T)
param.2 = data.frame(param.2.k,param.2.Y,param.2.af,param.2.as,param.2.sf,param.2.sr)
names(param.2) <- c("k","Y","af","as","sf","sr")
param.set = list(param.1, param.2)
result = CBM.wtc3.manual(no.param.par.var, treat.group, with.storage, model.comparison, model.optimization, param.set) # Quadratic/Cubic parameters
result[[6]]
write.csv(result[[6]], "output/bic.csv", row.names=FALSE) # unit of respiration rates: gC per gC plant per day
# Plot parameters and biomass data fit
plot.Modelled.parameters(result,with.storage)
plot.Modelled.biomass(result,with.storage)
treat.group = as.factor(c("ambient","elevated")) # Assign all treatments
data.all = read.csv("processed_data/data_all.csv")
tnc.partitioning = read.csv("processed_data/tnc_partitioning_data.csv")
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-6)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T), model.comparison=c(F,F), model.optimization=c(F,F),
no.param.par.var=c(9,9),
treat.group=treat.group,
MoreArgs=list(chainLength=1000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 2)
for (i in 1:2) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-6)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T), model.comparison=c(F,F), model.optimization=c(F,F),
no.param.par.var=c(9,9),
treat.group=treat.group,
MoreArgs=list(chainLength=1000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 2)
for (i in 1:2) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-6)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T), model.comparison=c(F,F), model.optimization=c(F,F),
no.param.par.var=c(9,9),
treat.group=treat.group,
MoreArgs=list(chainLength=1000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 2)
for (i in 1:2) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-6)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T), model.comparison=c(F,F), model.optimization=c(F,F),
no.param.par.var=c(4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=1000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 2)
for (i in 1:2) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-6)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T), model.comparison=c(F,F), model.optimization=c(F,F),
no.param.par.var=c(4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=1000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 2)
for (i in 1:2) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-6)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T), model.comparison=c(F,F), model.optimization=c(F,F),
no.param.par.var=c(4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=1000))
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-6)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T), model.comparison=c(F,F), model.optimization=c(F,F),
no.param.par.var=c(4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=1000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 2)
for (i in 1:2) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-6)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T), model.comparison=c(F,F), model.optimization=c(F,F),
no.param.par.var=c(4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=3000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 2)
for (i in 1:2) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-6)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T), model.comparison=c(F,F), model.optimization=c(F,F),
no.param.par.var=c(4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=3000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 2)
for (i in 1:2) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-6)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T), model.comparison=c(F,F), model.optimization=c(F,F),
no.param.par.var=c(4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=3000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 2)
for (i in 1:2) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-6)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T), model.comparison=c(F,F), model.optimization=c(F,F),
no.param.par.var=c(4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=3000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 2)
for (i in 1:2) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-6)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T), model.comparison=c(F,F), model.optimization=c(F,F),
no.param.par.var=c(4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=3000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 2)
for (i in 1:2) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-6)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T), model.comparison=c(F,F), model.optimization=c(F,F),
no.param.par.var=c(4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=3000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 2)
for (i in 1:2) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-6)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T), model.comparison=c(F,F), model.optimization=c(F,F),
no.param.par.var=c(4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=3000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 2)
for (i in 1:2) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-6)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T), model.comparison=c(F,F), model.optimization=c(F,F),
no.param.par.var=c(4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=3000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 2)
for (i in 1:2) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-6)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T), model.comparison=c(F,F), model.optimization=c(F,F),
no.param.par.var=c(4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=3000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 2)
for (i in 1:2) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-6)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T), model.comparison=c(F,F), model.optimization=c(F,F),
no.param.par.var=c(3,3),
treat.group=treat.group,
MoreArgs=list(chainLength=3000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 2)
for (i in 1:2) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-6)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T), model.comparison=c(F,F), model.optimization=c(F,F),
no.param.par.var=c(3,3),
treat.group=treat.group,
MoreArgs=list(chainLength=3000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 2)
for (i in 1:2) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
