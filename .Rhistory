model.optimization=F
treat.group=c(list(1,2))
treat.group = as.factor(c("ambient","elevated")) # Assign all treatments
data.all = read.csv("processed_data/data_all.csv")
data.all$treatment.no [data.all$Treatment %in% as.factor("ambient") ] = 1
data.all$treatment.no [data.all$Treatment %in% as.factor("elevated") ] = 2
tnc.partitioning = read.csv("processed_data/tnc_partitioning_data.csv")
source("R/load_packages_wtc3.R")
# Assign inputs for MCMC
bunr_in = chainLength * 0.1 # Discard the first 10% iterations for Burn-IN in MCMC (According to Oijen, 2008)
if (with.storage==T) {
no.var = 6 # variables to be modelled are: k,Y,af,as,sf,sr
} else {
no.var = 5 # variables to be modelled are: Y,af,as,sf,sr
}
treat = as.factor(c("ambient","elevated")) # Assign all treatments
# treat = as.factor(c("ambient","elevated","amb+ele","amb+ele+const")) # Assign all treatments
# treat = factor(treat, levels=c(sort(setdiff(unique(treat), 'amb+ele'),decreasing=FALSE), 'amb+ele'))
param.mean = data.frame(matrix(ncol = no.var+1, nrow = length(no.param.par.var)*length(treat.group)))
if (with.storage==T) {
names(param.mean) = c("k","Y","af","as","ar","sf","sr")
} else {
names(param.mean) = c("Y","af","as","ar","sf","sr")
}
aic.bic = data.frame(matrix(ncol = 6, nrow = length(no.param.par.var)*length(treat.group)))
names(aic.bic) <- c("logLi","aic","bic","time","no.param","treatment")
time = data.frame(no.param=rep(no.param.par.var,length(treat.group)),
start.time=numeric(length(no.param.par.var)*length(treat.group)),
end.time=numeric(length(no.param.par.var)*length(treat.group)),
time.taken=numeric(length(no.param.par.var)*length(treat.group)))
q = 0 #
length(treat.group)
treat.group
v1=1
v = unlist(treat.group[v1])
v
data = subset(data.all,(treatment.no %in% v))
View(data.all)
v
treat.group[v]
View(data.all)
data = subset(data.all,(Treatment %in% v))
View(data)
treat.group=c(list(1,2))
treat.group
source("R/load_packages_wtc3.R")
# Assign inputs for MCMC
bunr_in = chainLength * 0.1 # Discard the first 10% iterations for Burn-IN in MCMC (According to Oijen, 2008)
if (with.storage==T) {
no.var = 6 # variables to be modelled are: k,Y,af,as,sf,sr
} else {
no.var = 5 # variables to be modelled are: Y,af,as,sf,sr
}
treat = as.factor(c("ambient","elevated")) # Assign all treatments
# treat = as.factor(c("ambient","elevated","amb+ele","amb+ele+const")) # Assign all treatments
# treat = factor(treat, levels=c(sort(setdiff(unique(treat), 'amb+ele'),decreasing=FALSE), 'amb+ele'))
param.mean = data.frame(matrix(ncol = no.var+1, nrow = length(no.param.par.var)*length(treat.group)))
if (with.storage==T) {
names(param.mean) = c("k","Y","af","as","ar","sf","sr")
} else {
names(param.mean) = c("Y","af","as","ar","sf","sr")
}
aic.bic = data.frame(matrix(ncol = 6, nrow = length(no.param.par.var)*length(treat.group)))
names(aic.bic) <- c("logLi","aic","bic","time","no.param","treatment")
time = data.frame(no.param=rep(no.param.par.var,length(treat.group)),
start.time=numeric(length(no.param.par.var)*length(treat.group)),
end.time=numeric(length(no.param.par.var)*length(treat.group)),
time.taken=numeric(length(no.param.par.var)*length(treat.group)))
q = 0
v1
v = unlist(treat.group[v1])
v
data = subset(data.all,(Treatment.no %in% v))
data = subset(data.all,(Treatment.no %in% v))
v
data = subset(data.all,(treatment.no %in% v))
z=1
q = q + 1
time$start.time[q] <- Sys.time()
# param.vary = 31 # monthly = 31
param.vary = ceiling(nrow(data)/no.param.par.var[z]) # How many days the parameter set remain unchanged (weekly = 8; monthly = 31; just one parameter = nrow(data))
# no.param = ceiling(nrow(data.set)/param.vary) # number of parameter set for the whole duration of experiment (121 days)
no.param = ceiling(nrow(data)/param.vary) # number of parameter set for the whole duration of experiment (121 days)
source("R/parameter_setting_wtc3.R", local=TRUE)
vcov = (0.05*(pMaxima-pMinima))^2
# vcov = (0.0025*(pMaxima-pMinima))^2
# vcov = (0.001*(pMaxima-pMinima))^2
vcovProposal =  vcov # The higher the coefficient, the higher the deviations in parameter time series
# Find the Prior probability density
prior.dist = vector("list", no.var)
for (i in 1:no.var) {
prior.dist[i] = list(log(dnorm(pValues[ , i], (pMinima[ , i] + pMaxima[ , i])/2, (pMaxima[ , i] - pMinima[ , i])/3))) # Prior normal gaussian distribution
}
logPrior0 <- sum(unlist(prior.dist))
length(v)
j=1
v[j]
listofdfs <- list()
data.set = subset(data,(treatment.no %in% v[j]))
for (u in 1:10) {
if (no.param.par.var < 5) {
if (with.storage==T) {
output.set = model(no.param,data.set,tnc.partitioning,Y=pValues$Y,k=pValues$k,af=pValues$af,as=pValues$as,sf=pValues$sf,sr=pValues$sr)
} else {
output.set = model.without.storage(no.param,data.set,Y=pValues$Y,af=pValues$af,as=pValues$as,sf=pValues$sf,sr=pValues$sr)
}
} else { # no.param.par.var > 5; monthly parameter setting)
if (with.storage==T) {
output.set = model.monthly(data.set,j,tnc.partitioning,Y=pValues$Y,k=pValues$k,af=pValues$af,as=pValues$as,sf=pValues$sf,sr=pValues$sr)
} else {
output.set = model.without.storage.monthly(data.set,j,Y=pValues$Y,af=pValues$af,as=pValues$as,sf=pValues$sf,sr=pValues$sr)
}
}
listofdfs[[u]] <- output.set
}
output.set = aaply(laply(listofdfs, as.matrix), c(2, 3), mean)
output.set$treatment = as.factor(treat[v1])
# output = output.set
if (j == 1) {
output = output.set
}
if (j > 1) {
output = rbind(output,output.set)
}
treat
v1
as.factor(treat[v1])
listofdfs <- list()
data.set = subset(data,(treatment.no %in% v[j]))
output.set = model(no.param,data.set,tnc.partitioning,Y=pValues$Y,k=pValues$k,af=pValues$af,as=pValues$as,sf=pValues$sf,sr=pValues$sr)
listofdfs[[u]] <- output.set
for (u in 1:10) {
if (no.param.par.var < 5) {
if (with.storage==T) {
output.set = model(no.param,data.set,tnc.partitioning,Y=pValues$Y,k=pValues$k,af=pValues$af,as=pValues$as,sf=pValues$sf,sr=pValues$sr)
} else {
output.set = model.without.storage(no.param,data.set,Y=pValues$Y,af=pValues$af,as=pValues$as,sf=pValues$sf,sr=pValues$sr)
}
} else { # no.param.par.var > 5; monthly parameter setting)
if (with.storage==T) {
output.set = model.monthly(data.set,j,tnc.partitioning,Y=pValues$Y,k=pValues$k,af=pValues$af,as=pValues$as,sf=pValues$sf,sr=pValues$sr)
} else {
output.set = model.without.storage.monthly(data.set,j,Y=pValues$Y,af=pValues$af,as=pValues$as,sf=pValues$sf,sr=pValues$sr)
}
}
listofdfs[[u]] <- output.set
}
output.set = aaply(laply(listofdfs, as.matrix), c(2, 3), mean)
View(output.set)
output.set = as.data.frame(aaply(laply(listofdfs, as.matrix), c(2, 3), mean))
View(output.set)
output.set$treatment = as.factor(treat[v1])
if (j == 1) {
output = output.set
}
if (j > 1) {
output = rbind(output,output.set)
}
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2))),
MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
# # Test whether parameters need to be seperate for both ambient and warmed treatments
# result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2,c(1,2)))),
#                      MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
# listOfDataFrames <- vector(mode = "list", length = length(treat.group[[1]]))
# for (i in 1:length(treat.group[[1]])) {
#   listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
# }
# bic = do.call("rbind", listOfDataFrames)
# write.csv(bic, "output/bic.csv", row.names=FALSE)
write.csv(result[[1]][[6]], "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
result[[1]][[6]]
View(data.set)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2))),
MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
# # Test whether parameters need to be seperate for both ambient and warmed treatments
# result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2,c(1,2)))),
#                      MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
# listOfDataFrames <- vector(mode = "list", length = length(treat.group[[1]]))
# for (i in 1:length(treat.group[[1]])) {
#   listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
# }
# bic = do.call("rbind", listOfDataFrames)
# write.csv(bic, "output/bic.csv", row.names=FALSE)
write.csv(result[[1]][[6]], "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
result[[1]][[6]]
View(tnc.partitioning)
View(tnc)
tnc.wtc4 <- read.xls("raw_data/Samples_WTC4_heatwave_10.10.2017.xlsx",1)
# wtc4.treatment = read.csv("raw_data/WTC_TEMP-PARRA_CM_TREE-HEIGHT-DIAMETER_20151028-20161124_L1.csv")
# names(tnc.wtc4)[3] = "chamber"
# tnc.wtc4 = merge(tnc.wtc4, wtc4.treatment[,c("chamber","T_treatment")], by="chamber")
keeps = c("Tissue","Chamber","Sugar..mg.g.","Starch..mg.g.")
tnc.wtc4 = tnc.wtc4[ , keeps, drop = FALSE]
tnc.wtc4$tnc..mg.g. = tnc.wtc4$Sugar..mg.g. + tnc.wtc4$Starch..mg.g.
View(tnc.wtc4)
tnc.wtc4 <- summaryBy(tnc..mg.g. ~ Tissue, data=tnc.wtc4, FUN=c(mean,standard.error))
tnc.wtc4$Tissue = as.character(tnc.wtc4$Tissue)
tnc.wtc4$tnc.ratio = tnc.wtc4$tnc..mg.g..mean / sum(tnc.wtc4$tnc..mg.g..mean) * 100
tnc.wtc4$tnc.ratio.SE = tnc.wtc4$tnc..mg.g..standard.error / tnc.wtc4$tnc..mg.g..mean * tnc.wtc4$tnc.ratio
tnc.wtc4[c(6:7),1] = as.character(c("wood", "root"))
tnc.wtc4[6,c(2:5)] = tnc.wtc4[2,c(2:5)] + tnc.wtc4[3,c(2:5)]
tnc.wtc4[7,c(2:5)] = tnc.wtc4[1,c(2:5)] + tnc.wtc4[5,c(2:5)]
tnc.wtc4 = tnc.wtc4[c(4,6,7),c(1,4,5)]
carbohydrates = read.csv("raw_data/Duan_carbohydrates.csv")
carbohydrates = subset(carbohydrates,CO2 == 400 & Temp == "Amb" & Water == "Well watered")
carbohydrates$tnc = carbohydrates$StarchW + carbohydrates$SolSugW # Unit = mg of tnc per g of dry weight biomass
carbohydrates$tnc = carbohydrates$tnc / 10 # Unit = % of dry weight biomass
# unit conversion from g of tnc per g of dry weight biomass to gC in tnc per gC in plant biomass
# 1 g of tnc has 0.4 gC and 1 g of dry weight biomass has 0.48 gC
carbohydrates$tnc = carbohydrates$tnc * (0.4/c1) # Unit = gC in tnc / gC in plant biomass
#-----------------------------------------------------------------------------------------
##### Total TNC calculation considering tree organ biomass partitioning
leaf.tnc = subset(carbohydrates,Organ == "Leaf") # Unit = % of dry weight leafmass
stem.tnc = subset(carbohydrates,Organ == "Stem") # Unit = % of dry weight stemmass
root.tnc = subset(carbohydrates,Organ == "Root") # Unit = % of dry weight rootmass
tnc.pot = data.frame(leaf.tnc$tnc,stem.tnc$tnc,root.tnc$tnc)
names(tnc.pot) <- c("leaf.tnc.C","stem.tnc.C","root.tnc.C")
View(tnc.pot)
summaryBy(leaf.tnc.C+stem.tnc.C+root.tnc.C , data=tnc.pot, FUN=c(mean,standard.error))
View(carbohydrates)
summaryBy(StarchW+SolSugW+tnc ~ Organ, data=carbohydrates, FUN=c(mean,standard.error))
subset(carbohydrates,Organ == "Leaf")
colMeans(tnc.pot)
tnc.pot[7,] / rowSums(tnc.pot[7,]) * 100
tnc.pot[7,] = colMeans(tnc.pot)
tnc.pot[8,] = tnc.pot[7,] / rowSums(tnc.pot[7,]) * 100
carbohydrates = read.csv("raw_data/Duan_carbohydrates.csv")
carbohydrates = read.csv("raw_data/Duan_carbohydrates.csv")
carbohydrates = subset(carbohydrates,CO2 == 400 & Temp == "Amb" & Water == "Well watered")
carbohydrates$tnc = carbohydrates$StarchW + carbohydrates$SolSugW # Unit = mg of tnc per g of dry weight biomass
carbohydrates$tnc = carbohydrates$tnc / 10 # Unit = % of dry weight biomass
# unit conversion from g of tnc per g of dry weight biomass to gC in tnc per gC in plant biomass
# 1 g of tnc has 0.4 gC and 1 g of dry weight biomass has 0.48 gC
carbohydrates$tnc = carbohydrates$tnc * (0.4/c1) # Unit = gC in tnc / gC in plant biomass
carbohydrates <- summaryBy(tnc ~ Organ, data=carbohydrates, FUN=c(mean,standard.error))
carbohydrates = read.csv("raw_data/Duan_carbohydrates.csv")
carbohydrates = subset(carbohydrates,CO2 == 400 & Temp == "Amb" & Water == "Well watered")
carbohydrates$tnc = carbohydrates$StarchW + carbohydrates$SolSugW # Unit = mg of tnc per g of dry weight biomass
carbohydrates$tnc = carbohydrates$tnc / 10 # Unit = % of dry weight biomass
# unit conversion from g of tnc per g of dry weight biomass to gC in tnc per gC in plant biomass
# 1 g of tnc has 0.4 gC and 1 g of dry weight biomass has 0.48 gC
carbohydrates$tnc = carbohydrates$tnc * (0.4/c1) # Unit = gC in tnc / gC in plant biomass
tnc.pot <- summaryBy(tnc ~ Organ, data=carbohydrates, FUN=c(mean,standard.error))
colSums(tnc.pot[,c(1:2)])
colSums(tnc.pot[,c(1:2)])
colSums(tnc.pot[,c(2:3)])
tnc.pot[,c(2:3)]
tnc.pot <- summaryBy(tnc ~ Organ, data=carbohydrates, FUN=c(mean,standard.error))
tnc.pot[,2] = tnc.pot[,2] / colSums(tnc.pot[,2]) * 100
colSums(tnc.pot[,2])
tnc.pot[,2]
sum(tnc.pot[,2])
tnc.pot[,2] = tnc.pot[,2] / sum(tnc.pot[,2]) * 100
tnc.pot[,3] = tnc.pot[,3] / sum(tnc.pot[,3]) * 100
tnc.pot <- summaryBy(tnc ~ Organ, data=carbohydrates, FUN=c(mean,standard.error))
sum(tnc.pot[,3])
tnc.pot[,3] / sum(tnc.pot[,3]) * 100
tnc.pot[,3] * tnc.pot[,2] / sum(tnc.pot[,2])
tnc.pot[,3] / tnc.pot[,2] * sum(tnc.pot[,2])
tnc.pot[,2] * sum(tnc.pot[,2])
tnc.pot[,3]
tnc.pot[,2] / sum(tnc.pot[,2])
sum(tnc.pot[,2])
tnc.pot <- summaryBy(tnc ~ Organ, data=carbohydrates, FUN=c(mean,standard.error))
tnc.pot[,2] = tnc.pot[,2] / sum(tnc.pot[,2]) * 100
tnc.pot[,3] = tnc.pot[,3] / tnc.pot[,2] * sum(tnc.pot[,2]) / 100
tnc.pot <- summaryBy(tnc ~ Organ, data=carbohydrates, FUN=c(mean,standard.error))
tnc.pot[,4] = tnc.pot[,2] / sum(tnc.pot[,2]) * 100
tnc.pot[,3] = tnc.pot[,3] / tnc.pot[,2] * tnc.pot[,4]
tnc.pot[,-2]
carbohydrates = read.csv("raw_data/Duan_carbohydrates.csv")
carbohydrates = subset(carbohydrates,CO2 == 400 & Temp == "Amb" & Water == "Well watered")
carbohydrates$tnc = carbohydrates$StarchW + carbohydrates$SolSugW # Unit = mg of tnc per g of dry weight biomass
carbohydrates$tnc = carbohydrates$tnc / 10 # Unit = % of dry weight biomass
# unit conversion from g of tnc per g of dry weight biomass to gC in tnc per gC in plant biomass
# 1 g of tnc has 0.4 gC and 1 g of dry weight biomass has 0.48 gC
carbohydrates$tnc = carbohydrates$tnc * (0.4/c1) # Unit = gC in tnc / gC in plant biomass
tnc.pot <- summaryBy(tnc ~ Organ, data=carbohydrates, FUN=c(mean,standard.error))
tnc.pot[,4] = tnc.pot[,2] / sum(tnc.pot[,2]) * 100
tnc.pot[,3] = tnc.pot[,3] / tnc.pot[,2] * tnc.pot[,4]
tnc.pot = tnc.pot[,-2]
names(tnc.pot)[3] = "tnc.mean"
names(tnc.pot) = c("organ","tnc.SE","tnc.mean")
tnc.partitioning = data.frame(matrix(ncol = 4, nrow = 252))
names(tnc.partitioning) = c("Date","foliage","wood","root")
tnc.partitioning$Date = as.Date(as.Date("2013-09-17"):as.Date("2014-05-26"))
tnc.partitioning = data.frame(matrix(ncol = 7, nrow = 252))
names(tnc.partitioning) = c("Date","foliage","wood","root","foliage_SE","wood_SE","root_SE")
tnc.partitioning$Date = as.Date(as.Date("2013-09-17"):as.Date("2014-05-26"))
tnc.partitioning[1,2:4] <- tnc.pot$tnc.mean/100
tnc.partitioning[1,5:7] <- tnc.pot$tnc.SE/100
tnc.partitioning[nrow(tnc.partitioning),2:4] <- tnc.wtc4$tnc.ratio/100
tnc.partitioning[nrow(tnc.partitioning),5:7] <- tnc.wtc4$tnc.ratio.SE/100
for (i in 2:ncol(tnc.partitioning)) {
tnc.partitioning[1:nrow(tnc.partitioning),i] = seq(tnc.partitioning[1,i], tnc.partitioning[nrow(tnc.partitioning),i], length.out = nrow(tnc.partitioning))
}
write.csv(tnc.partitioning, file = "processed_data/tnc_partitioning_data.csv", row.names = FALSE)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2))),
MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
# # Test whether parameters need to be seperate for both ambient and warmed treatments
# result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2,c(1,2)))),
#                      MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
# listOfDataFrames <- vector(mode = "list", length = length(treat.group[[1]]))
# for (i in 1:length(treat.group[[1]])) {
#   listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
# }
# bic = do.call("rbind", listOfDataFrames)
# write.csv(bic, "output/bic.csv", row.names=FALSE)
write.csv(result[[1]][[6]], "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
result[[1]][[6]]
View(tnc.partitioning)
rnorm(1, tnc.partitioning$foliage[i], tnc.partitioning$foliage_SE[i])
tnc.partitioning$foliage[i]
rnorm(1, tnc.partitioning$foliage[i], tnc.partitioning$foliage_SE[i])
rnorm(1, tnc.partitioning$foliage[i], tnc.partitioning$foliage_SE[i])
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2))),
MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
# # Test whether parameters need to be seperate for both ambient and warmed treatments
# result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2,c(1,2)))),
#                      MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
# listOfDataFrames <- vector(mode = "list", length = length(treat.group[[1]]))
# for (i in 1:length(treat.group[[1]])) {
#   listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
# }
# bic = do.call("rbind", listOfDataFrames)
# write.csv(bic, "output/bic.csv", row.names=FALSE)
write.csv(result[[1]][[6]], "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
result[[1]][[6]]
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2))),
MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
# # Test whether parameters need to be seperate for both ambient and warmed treatments
# result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2,c(1,2)))),
#                      MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
# listOfDataFrames <- vector(mode = "list", length = length(treat.group[[1]]))
# for (i in 1:length(treat.group[[1]])) {
#   listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
# }
# bic = do.call("rbind", listOfDataFrames)
# write.csv(bic, "output/bic.csv", row.names=FALSE)
write.csv(result[[1]][[6]], "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
result[[1]][[6]]
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2))),
MoreArgs=list(chainLength=1000, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
# # Test whether parameters need to be seperate for both ambient and warmed treatments
# result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2,c(1,2)))),
#                      MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
# listOfDataFrames <- vector(mode = "list", length = length(treat.group[[1]]))
# for (i in 1:length(treat.group[[1]])) {
#   listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
# }
# bic = do.call("rbind", listOfDataFrames)
# write.csv(bic, "output/bic.csv", row.names=FALSE)
write.csv(result[[1]][[6]], "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
result[[1]][[6]]
View(model)
View(model)
View(tnc.pot)
View(carbohydrates)
View(tnc.wtc4)
tnc.wtc4 <- read.xls("raw_data/Samples_WTC4_heatwave_10.10.2017.xlsx",1)
# wtc4.treatment = read.csv("raw_data/WTC_TEMP-PARRA_CM_TREE-HEIGHT-DIAMETER_20151028-20161124_L1.csv")
# names(tnc.wtc4)[3] = "chamber"
# tnc.wtc4 = merge(tnc.wtc4, wtc4.treatment[,c("chamber","T_treatment")], by="chamber")
keeps = c("Tissue","Chamber","Sugar..mg.g.","Starch..mg.g.")
tnc.wtc4 = tnc.wtc4[ , keeps, drop = FALSE]
carbohydrates = read.csv("raw_data/Duan_carbohydrates.csv")
carbohydrates = subset(carbohydrates,CO2 == 400 & Temp == "Amb" & Water == "Well watered")
carbohydrates$tnc = carbohydrates$StarchW + carbohydrates$SolSugW # Unit = mg of tnc per g of dry weight biomass
carbohydrates$tnc = carbohydrates$tnc / 10 # Unit = % of dry weight biomass
# unit conversion from g of tnc per g of dry weight biomass to gC in tnc per gC in plant biomass
# 1 g of tnc has 0.4 gC and 1 g of dry weight biomass has 0.48 gC
carbohydrates$tnc = carbohydrates$tnc * (0.4/c1) # Unit = gC in tnc / gC in plant biomass
tnc.pot <- summaryBy(tnc ~ Organ, data=carbohydrates, FUN=c(mean,standard.error))
tnc.wtc4 <- read.xls("raw_data/Samples_WTC4_heatwave_10.10.2017.xlsx",1)
keeps = c("Tissue","Chamber","Sugar..mg.g.","Starch..mg.g.")
tnc.wtc4 = tnc.wtc4[ , keeps, drop = FALSE]
tnc.wtc4$tnc..mg.g. = tnc.wtc4$Sugar..mg.g. + tnc.wtc4$Starch..mg.g.
tnc.wtc4 <- summaryBy(tnc..mg.g. ~ Tissue, data=tnc.wtc4, FUN=c(mean,standard.error))
tnc.wtc4$Tissue = as.character(tnc.wtc4$Tissue)
tnc.wtc4$tnc.ratio = tnc.wtc4$tnc..mg.g..mean / sum(tnc.wtc4$tnc..mg.g..mean) * 100
tnc.wtc4$tnc.ratio.SE = tnc.wtc4$tnc..mg.g..standard.error / tnc.wtc4$tnc..mg.g..mean * tnc.wtc4$tnc.ratio
tnc.wtc4[c(6:7),1] = as.character(c("wood", "root"))
tnc.wtc4[6,c(2:5)] = tnc.wtc4[2,c(2:5)] + tnc.wtc4[3,c(2:5)]
tnc.wtc4[7,c(2:5)] = tnc.wtc4[1,c(2:5)] + tnc.wtc4[5,c(2:5)]
tnc.wtc4 = tnc.wtc4[c(4,6,7),c(1,4,5)]
tnc.wtc4 <- read.xls("raw_data/Samples_WTC4_heatwave_10.10.2017.xlsx",1)
# wtc4.treatment = read.csv("raw_data/WTC_TEMP-PARRA_CM_TREE-HEIGHT-DIAMETER_20151028-20161124_L1.csv")
# names(tnc.wtc4)[3] = "chamber"
# tnc.wtc4 = merge(tnc.wtc4, wtc4.treatment[,c("chamber","T_treatment")], by="chamber")
keeps = c("Tissue","Chamber","Sugar..mg.g.","Starch..mg.g.")
tnc.wtc4 = tnc.wtc4[ , keeps, drop = FALSE]
tnc.wtc4$tnc..mg.g. = tnc.wtc4$Sugar..mg.g. + tnc.wtc4$Starch..mg.g.
# There was no statistically significant difference in TNC partitioning across the treatments as John tested.
tnc.wtc4 <- summaryBy(tnc..mg.g. ~ Tissue, data=tnc.wtc4, FUN=c(mean,standard.error))
tnc.wtc4$Tissue = as.character(tnc.wtc4$Tissue)
tnc.wtc4$tnc.ratio = tnc.wtc4$tnc..mg.g..mean / sum(tnc.wtc4$tnc..mg.g..mean) * 100
tnc.wtc4 <- read.xls("raw_data/Samples_WTC4_heatwave_10.10.2017.xlsx",1)
keeps = c("Tissue","Chamber","Sugar..mg.g.","Starch..mg.g.")
tnc.wtc4 = tnc.wtc4[ , keeps, drop = FALSE]
tnc.wtc4$tnc..mg.g. = tnc.wtc4$Sugar..mg.g. + tnc.wtc4$Starch..mg.g.
tnc.wtc4 <- summaryBy(tnc..mg.g. ~ Tissue, data=tnc.wtc4, FUN=c(mean,standard.error))
View(data.hr.p)
data.hr <- read.csv("raw_data/WTC_TEMP_CM_WTCFLUX_20130914-20140526_L2_V2.csv")
View(data.hr)
View(data.hr)
source('R/load_packages_wtc3.R')
# Load the custom analysis and plotting functions that do all of the actual work
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
#----------------------------------
treeMass <- read.csv("data/WTC_TEMP_CM_WTCFLUX_20130914-20140526_L2_V2.csv")
treeMass.sub <- subset(treeMass,as.Date(DateTime) %in% as.Date(c("2013-09-14","2014-02-10","2014-05-27")))
treeMass <- read.csv("data/WTC_TEMP_CM_WTCFLUX_20130914-20140526_L2_V2.csv")
getwd()
treeMass <- read.csv("raw_data/WTC_TEMP_CM_WTCFLUX_20130914-20140526_L2_V2.csv")
View(data)
