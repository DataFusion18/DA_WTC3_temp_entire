View(biomass.final.partitioning)
biomass.final.partitioning$biomass = biomass.final.partitioning$RM + biomass.final.partitioning$LM + biomass.final.partitioning$WM
biomass.final.partitioning[c(1:2),] / biomass.final.partitioning$biomass
biomass.final.partitioning[c(1:2),]
biomass.final.partitioning$biomass[c(1:2)]
biomass.final.partitioning[c(1:2),] / biomass.final.partitioning$biomass[c(1:2)]
biomass.sub = subset(data.biomass, Date %in% as.Date(c("2013-09-17","2014-05-26")))
biomass.sub$biomass = biomass.sub$RM + biomass.sub$LM + biomass.sub$WM
biomass.sub = subset(biomass.sub, Date %in% as.Date("2014-05-26"))
biomass.final.partitioning[c("LM","RM","WM"),] / biomass.final.partitioning$biomass[c(1:2)]
biomass.final.partitioning[c("LM","RM","WM"),]
biomass.final.partitioning[,c("LM","RM","WM")]
biomass.final.partitioning$biomass[c(1:2)]
biomass.final.partitioning[,c("LM","RM","WM")] / biomass.final.partitioning$biomass[c(1:2)]
biomass.sub = subset(data.biomass, Date %in% as.Date(c("2013-09-17","2014-05-26")))
biomass.sub$biomass = biomass.sub$RM + biomass.sub$LM + biomass.sub$WM
biomass.sub = subset(biomass.sub, Date %in% as.Date("2014-05-26"))
biomass.sub[c(3:4),c("LM","RM","WM")] = biomass.sub[,c("LM","RM","WM")] / biomass.sub$biomass[c(1:2)]
View(biomass.sub)
ggplot(summary.error.Cpool, aes(x=Date, y=parameter, group = treatment, colour=treatment)) +
geom_point(position=pd,size=0.3) +
geom_ribbon(data = summary.error.Cpool, aes(ymin=parameter-value, ymax=parameter+value), linetype=2, alpha=0.1,size=0.1) +
# geom_errorbar(position=pd,aes(ymin=parameter-value, ymax=parameter+value), colour="grey", width=0.5) +
# geom_line(position=pd,data = summary.output.Cpool, aes(x = Date, y = value, group = interaction(volume,volume.group,no.param), linetype=volume.group, colour=volume, size=no.param)) +
# geom_line(position=pd,data = summary.output.Cpool, aes(x = Date, y = value, group = interaction(volume,no.param), linetype=no.param, colour=volume)) +
geom_line(position=pd,data = summary.output.Cpool, aes(x = Date, y = value, group = interaction(treatment,treat.type), colour=treatment, linetype=treat.type)) +
ylab(paste(as.character(meas[p]),"(g C)")) + xlab("Month") +
# ggtitle("C pools - Measured (points) vs Modelled (lines)") +
# labs(colour="Soil Volume", linetype="Grouping treatment", size="Total No of Parameter") +
# labs(colour="Pot Volume (L)", linetype="No. of Parameters") +
labs(colour="Treatment",linetype="Parameter option") +
scale_color_manual(values=cbPalette[1:4]) +
# scale_color_manual(labels = c("Individuals", "One Group"), values = c("blue", "red")) +
# coord_trans(y = "log10") + ylab(paste(as.character(meas[p]),"(g C plant-1)")) +
theme_bw() +
annotate("text", x = max(summary.output.Cpool$Date), y = min(summary.output.Cpool$value), size = font.size-7, label = paste(title[p])) +
theme(legend.title = element_text(colour="black", size=font.size-2)) +
theme(legend.text = element_text(colour="black", size = font.size-3)) +
theme(legend.key.height=unit(0.6,"line")) +
theme(legend.position = c(0.4,0.8)) + theme(legend.box = "horizontal") +
theme(legend.key = element_blank()) +
theme(text = element_text(size=font.size)) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_text(size = font.size, vjust=0.3)) +
# theme(plot.title = element_text(hjust = 0)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
source('R/load_packages_wtc3.R')
# Load the custom analysis and plotting functions that do all of the actual work
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
plot.Modelled.biomass(result,with.storage)
ggplot(summary.error.Cpool, aes(x=Date, y=parameter, group = treatment, colour=treatment)) +
geom_point(position=pd,size=0.3)
plot.Modelled.biomass.wtc3(result,with.storage=T)
treat.group
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, treat.group=treat.group,
MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
write.csv(result[[1]][[6]], "output/bic.csv", row.names=FALSE)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2))),
MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
# # Test whether parameters need to be seperate for both ambient and warmed treatments
# result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2,c(1,2)))),
#                      MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2,c(1,2)))),
MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
# result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2))),
#                      MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
# Test whether parameters need to be seperate for both ambient and warmed treatments
result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2,c(1,2)))),
MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
View(data)
treat.group = as.factor(c("ambient","elevated")) # Assign all treatments
data.all = read.csv("processed_data/data_all.csv")
data.all$treatment.no [data.all$Treatment %in% as.factor("ambient") ] = 1
data.all$treatment.no [data.all$Treatment %in% as.factor("elevated") ] = 2
tnc.partitioning = read.csv("processed_data/tnc_partitioning_data.csv")
#
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2))),
MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
# # Test whether parameters need to be seperate for both ambient and warmed treatments
# result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2,c(1,2)))),
#                      MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
write.csv(result[[1]][[6]], "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
meas[p]
length(meas)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2))),
MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
# # Test whether parameters need to be seperate for both ambient and warmed treatments
# result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2,c(1,2)))),
#                      MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
# listOfDataFrames <- vector(mode = "list", length = length(treat.group[[1]]))
# for (i in 1:length(treat.group[[1]])) {
#   listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
# }
# bic = do.call("rbind", listOfDataFrames)
# write.csv(bic, "output/bic.csv", row.names=FALSE)
write.csv(result[[1]][[6]], "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
# result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2))),
#                      MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
# Test whether parameters need to be seperate for both ambient and warmed treatments
result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2,c(1,2)))),
MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
# listOfDataFrames <- vector(mode = "list", length = length(treat.group[[1]]))
# for (i in 1:length(treat.group[[1]])) {
#   listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
# }
# bic = do.call("rbind", listOfDataFrames)
# write.csv(bic, "output/bic.csv", row.names=FALSE)
write.csv(result[[1]][[6]], "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
treat.group = as.factor(c("ambient","elevated")) # Assign all treatments
data.all = read.csv("processed_data/data_all.csv")
data.all$treatment.no [data.all$Treatment %in% as.factor("ambient") ] = 1
data.all$treatment.no [data.all$Treatment %in% as.factor("elevated") ] = 2
tnc.partitioning = read.csv("processed_data/tnc_partitioning_data.csv")
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2))),
MoreArgs=list(chainLength=1000, no.param.par.var=4, with.storage=T, model.comparison=F, model.optimization=F))
# # Test whether parameters need to be seperate for both ambient and warmed treatments
# result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2,c(1,2)))),
#                      MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
# listOfDataFrames <- vector(mode = "list", length = length(treat.group[[1]]))
# for (i in 1:length(treat.group[[1]])) {
#   listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
# }
# bic = do.call("rbind", listOfDataFrames)
# write.csv(bic, "output/bic.csv", row.names=FALSE)
write.csv(result[[1]][[6]], "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2))),
MoreArgs=list(chainLength=1000, no.param.par.var=3, with.storage=T, model.comparison=F, model.optimization=F))
# # Test whether parameters need to be seperate for both ambient and warmed treatments
# result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2,c(1,2)))),
#                      MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
# listOfDataFrames <- vector(mode = "list", length = length(treat.group[[1]]))
# for (i in 1:length(treat.group[[1]])) {
#   listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
# }
# bic = do.call("rbind", listOfDataFrames)
# write.csv(bic, "output/bic.csv", row.names=FALSE)
write.csv(result[[1]][[6]], "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2))),
MoreArgs=list(chainLength=1000, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
# # Test whether parameters need to be seperate for both ambient and warmed treatments
# result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2,c(1,2)))),
#                      MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
# listOfDataFrames <- vector(mode = "list", length = length(treat.group[[1]]))
# for (i in 1:length(treat.group[[1]])) {
#   listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
# }
# bic = do.call("rbind", listOfDataFrames)
# write.csv(bic, "output/bic.csv", row.names=FALSE)
write.csv(result[[1]][[6]], "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2))),
MoreArgs=list(chainLength=1000, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
# # Test whether parameters need to be seperate for both ambient and warmed treatments
# result <- clusterMap(cluster, CBM.wtc3, treat.group=c(list(list(1,2,c(1,2)))),
#                      MoreArgs=list(chainLength=300, no.param.par.var=2, with.storage=T, model.comparison=F, model.optimization=F))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
# listOfDataFrames <- vector(mode = "list", length = length(treat.group[[1]]))
# for (i in 1:length(treat.group[[1]])) {
#   listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
# }
# bic = do.call("rbind", listOfDataFrames)
# write.csv(bic, "output/bic.csv", row.names=FALSE)
write.csv(result[[1]][[6]], "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
View(data.biomass)
lm = data.biomass[,c("Date","T_treatment","LM","litter")]
View(lm)
spline(lm)
spline(lm$LM)
lm = data.biomass[,c("Date","T_treatment","LM","litter")]
lm[,c("LM","litter")] = spline(lm[,c("LM","litter")])
lm = data.biomass[,c("Date","T_treatment","LM","litter")]
spline(lm[,c("LM","litter")])
lm = data.biomass[,c("Date","T_treatment","LM","litter")]
# lm[,c("LM","litter")] = spline(lm[,c("LM","litter")])
lm[,c(3:4)] = na.spline(lm[,c(3:4)])
lm$litterrate = lm$litter / lm$LM
View(litterfall)
View(litterfall.cast)
View(litterfall.cum)
litterfall = read.csv("raw_data/WTC_TEMP_CM_LEAFLITTER_20130913-20140528_L1.csv")
litterfall$startDate = as.Date(litterfall$startDate)
litterfall$collectionDate = as.Date(litterfall$collectionDate)
litterfall$Date <- (litterfall$startDate + ((litterfall$collectionDate - litterfall$startDate) / 2))
litterfall = subset(litterfall, Date >= as.Date("2013-09-14") & Date <= as.Date("2014-05-27"))
# litterfall = subset(litterfall, Date >= as.Date("2013-09-14") & Date <= as.Date("2014-02-12"))
# convert to data.table in place
litterfall = setDT(litterfall)
# dcast and do individual sums
litterfall.cast = dcast.data.table(litterfall, chamber ~ Date, value.var = 'litter', fun.aggregate = sum)
View(litterfall.cast)
litterfall.cast[, as.list((unlist(.SD))), by = chamber]
litterfall.sub <- litterfall.cast[, as.list((unlist(.SD))), by = chamber]
View(litterfall.sub)
View(litterfall.cum)
melt(litterfall.cum, id.vars = "chamber")
litterfall = read.csv("raw_data/WTC_TEMP_CM_LEAFLITTER_20130913-20140528_L1.csv")
litterfall$startDate = as.Date(litterfall$startDate)
litterfall$collectionDate = as.Date(litterfall$collectionDate)
litterfall$Date <- (litterfall$startDate + ((litterfall$collectionDate - litterfall$startDate) / 2))
litterfall = subset(litterfall, Date >= as.Date("2013-09-14") & Date <= as.Date("2014-05-27"))
# litterfall = subset(litterfall, Date >= as.Date("2013-09-14") & Date <= as.Date("2014-02-12"))
# convert to data.table in place
litterfall = setDT(litterfall)
# dcast and do individual sums
litterfall.cast = dcast.data.table(litterfall, chamber ~ Date, value.var = 'litter', fun.aggregate = sum)
litterfall.cast <- melt(litterfall.cast, id.vars = "chamber")
litterfall.cast = merge(litterfall.cast, unique(treeMass[,c("chamber","T_treatment")]), all=TRUE)
View(litterfall.cast)
names(litterfall.cast)[2:3] = c("Date","litter")
litterfall.cast$Date = as.Date(litterfall.cum.melt$Date)
litterfall = read.csv("raw_data/WTC_TEMP_CM_LEAFLITTER_20130913-20140528_L1.csv")
litterfall$startDate = as.Date(litterfall$startDate)
litterfall$collectionDate = as.Date(litterfall$collectionDate)
litterfall$Date <- (litterfall$startDate + ((litterfall$collectionDate - litterfall$startDate) / 2))
litterfall = subset(litterfall, Date >= as.Date("2013-09-14") & Date <= as.Date("2014-05-27"))
# litterfall = subset(litterfall, Date >= as.Date("2013-09-14") & Date <= as.Date("2014-02-12"))
# convert to data.table in place
litterfall = setDT(litterfall)
# dcast and do individual sums
litterfall.cast = dcast.data.table(litterfall, chamber ~ Date, value.var = 'litter', fun.aggregate = sum)
litterfall.cast <- melt(litterfall.cast, id.vars = "chamber")
litterfall.cast = merge(litterfall.cast, unique(treeMass[,c("chamber","T_treatment")]), all=TRUE)
# litterfall.cum.melt$chamber_type = as.factor( ifelse(litterfall.cum.melt$chamber %in% drought.chamb, "drought", "watered") )
names(litterfall.cast)[2:3] = c("Date","litter")
as.Date(litterfall.cum.melt$Date, format="%Y-%m-%d")
litterfall.cast$Date = as.Date(litterfall.cum.melt$Date, format="%Y-%m-%d")
as.Date(litterfall.cast$Date, format="%Y-%m-%d")
litterfall = read.csv("raw_data/WTC_TEMP_CM_LEAFLITTER_20130913-20140528_L1.csv")
litterfall$startDate = as.Date(litterfall$startDate)
litterfall$collectionDate = as.Date(litterfall$collectionDate)
litterfall$Date <- (litterfall$startDate + ((litterfall$collectionDate - litterfall$startDate) / 2))
litterfall = subset(litterfall, Date >= as.Date("2013-09-14") & Date <= as.Date("2014-05-27"))
# litterfall = subset(litterfall, Date >= as.Date("2013-09-14") & Date <= as.Date("2014-02-12"))
# convert to data.table in place
litterfall = setDT(litterfall)
# dcast and do individual sums
litterfall.cast = dcast.data.table(litterfall, chamber ~ Date, value.var = 'litter', fun.aggregate = sum)
litterfall.cast <- melt(litterfall.cast, id.vars = "chamber")
litterfall.cast = merge(litterfall.cast, unique(treeMass[,c("chamber","T_treatment")]), all=TRUE)
# litterfall.cum.melt$chamber_type = as.factor( ifelse(litterfall.cum.melt$chamber %in% drought.chamb, "drought", "watered") )
names(litterfall.cast)[2:3] = c("Date","litter")
as.Date(litterfall.cast$Date)
litterfall.cast$Date = as.Date(litterfall.cast$Date)
litterfall.cast = summaryBy(litter ~ Date+T_treatment, data=litterfall.cast, FUN=c(mean,standard.error))
names(litterfall.cast)[3:4] = c("litter","litter_SE")
lm = data.biomass[,c("Date","T_treatment","LM","LM_SE")]
merge(lm,litterfall.cast, by=c("Date","T_treatment"))
litterfall = read.csv("raw_data/WTC_TEMP_CM_LEAFLITTER_20130913-20140528_L1.csv")
litterfall$startDate = as.Date(litterfall$startDate)
litterfall$collectionDate = as.Date(litterfall$collectionDate)
litterfall$Date <- (litterfall$startDate + ((litterfall$collectionDate - litterfall$startDate) / 2))
litterfall = subset(litterfall, Date >= as.Date("2013-09-14") & Date <= as.Date("2014-05-27"))
# litterfall = subset(litterfall, Date >= as.Date("2013-09-14") & Date <= as.Date("2014-02-12"))
# convert to data.table in place
litterfall = setDT(litterfall)
# dcast and do individual sums
litterfall.cast = dcast.data.table(litterfall, chamber ~ Date, value.var = 'litter', fun.aggregate = sum)
litterfall.cast <- melt(litterfall.cast, id.vars = "chamber")
litterfall.cast = merge(litterfall.cast, unique(treeMass[,c("chamber","T_treatment")]), all=TRUE)
# litterfall.cum.melt$chamber_type = as.factor( ifelse(litterfall.cum.melt$chamber %in% drought.chamb, "drought", "watered") )
names(litterfall.cast)[2:3] = c("Date","litter")
litterfall.cast$Date = as.Date(litterfall.cast$Date)
litterfall.cast = summaryBy(litter ~ Date+T_treatment, data=litterfall.cast, FUN=c(mean,standard.error))
names(litterfall.cast)[3:4] = c("litter","litter_SE")
# Foliage mass data
lm = data.biomass[,c("Date","T_treatment","LM","LM_SE")]
lm.litter = merge(lm,litterfall.cast, by=c("Date","T_treatment"))
View(lm.litter)
litterfall = read.csv("raw_data/WTC_TEMP_CM_LEAFLITTER_20130913-20140528_L1.csv")
litterfall$startDate = as.Date(litterfall$startDate)
litterfall$collectionDate = as.Date(litterfall$collectionDate)
litterfall$Date <- (litterfall$startDate + ((litterfall$collectionDate - litterfall$startDate) / 2))
litterfall = subset(litterfall, Date >= as.Date("2013-09-14") & Date <= as.Date("2014-05-27"))
# litterfall = subset(litterfall, Date >= as.Date("2013-09-14") & Date <= as.Date("2014-02-12"))
# convert to data.table in place
litterfall = setDT(litterfall)
# dcast and do individual sums
litterfall.cast = dcast.data.table(litterfall, chamber ~ Date, value.var = 'litter', fun.aggregate = sum)
litterfall.cast <- melt(litterfall.cast, id.vars = "chamber")
litterfall.cast = merge(litterfall.cast, unique(treeMass[,c("chamber","T_treatment")]), all=TRUE)
# litterfall.cum.melt$chamber_type = as.factor( ifelse(litterfall.cum.melt$chamber %in% drought.chamb, "drought", "watered") )
names(litterfall.cast)[2:3] = c("Date","litter")
litterfall.cast$Date = as.Date(litterfall.cast$Date)
litterfall.cast = summaryBy(litter ~ Date+T_treatment, data=litterfall.cast, FUN=c(mean,standard.error))
names(litterfall.cast)[3:4] = c("litter","litter_SE")
# Foliage mass data
lm = data.biomass[,c("Date","T_treatment","LM","LM_SE")]
lm.litter = merge(lm,litterfall.cast, by=c("Date","T_treatment"), all = TRUE)
lm.litter[,c(3:6)] = na.spline(lm.litter[,c(3:6)])
litterfall = read.csv("raw_data/WTC_TEMP_CM_LEAFLITTER_20130913-20140528_L1.csv")
litterfall$startDate = as.Date(litterfall$startDate)
litterfall$collectionDate = as.Date(litterfall$collectionDate)
litterfall$Date <- (litterfall$startDate + ((litterfall$collectionDate - litterfall$startDate) / 2))
litterfall = subset(litterfall, Date >= as.Date("2013-09-14") & Date <= as.Date("2014-05-27"))
# litterfall = subset(litterfall, Date >= as.Date("2013-09-14") & Date <= as.Date("2014-02-12"))
# convert to data.table in place
litterfall = setDT(litterfall)
# dcast and do individual sums
litterfall.cast = dcast.data.table(litterfall, chamber ~ Date, value.var = 'litter', fun.aggregate = sum)
litterfall.cast <- melt(litterfall.cast, id.vars = "chamber")
litterfall.cast = merge(litterfall.cast, unique(treeMass[,c("chamber","T_treatment")]), all=TRUE)
# litterfall.cum.melt$chamber_type = as.factor( ifelse(litterfall.cum.melt$chamber %in% drought.chamb, "drought", "watered") )
names(litterfall.cast)[2:3] = c("Date","litter")
litterfall.cast$Date = as.Date(litterfall.cast$Date)
litterfall.cast = summaryBy(litter ~ Date+T_treatment, data=litterfall.cast, FUN=c(mean,standard.error))
names(litterfall.cast)[3:4] = c("litter","litter_SE")
# Foliage mass data
lm = data.biomass[,c("Date","T_treatment","LM","LM_SE")]
lm.litter = merge(lm,litterfall.cast, by=c("Date","T_treatment"), all = TRUE)
lm.litter[,c(3:4)] = na.spline(lm.litter[,c(3:4)])
lm.litter$litterrate = lm.litter$litter / lm.litter$LM
lm.litter$litterrate = lm.litter$litter / lm.litter$LM / 14
which(lm.litter$T_treatment == as.factor("ambient"))
which(lm.litter$T_treatment %in% as.factor("ambient"))
sum(lm.litter$litterrate[which(lm.litter$T_treatment %in% as.factor("ambient"))])
sum(lm.litter$litterrate[which(lm.litter$T_treatment %in% as.factor("ambient"))], na.rm = T)
mean(lm.litter$litterrate[which(lm.litter$T_treatment %in% as.factor("ambient"))], na.rm = T)
mean(lm.litter$litterrate[which(lm.litter$T_treatment %in% as.factor("elevated"))], na.rm = T)
biomass.sub[c(3:4),c("LM","RM","WM")]
source('R/load_packages_wtc3.R')
# Load the custom analysis and plotting functions that do all of the actual work
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
treat.group = as.factor(c("ambient","elevated")) # Assign all treatments
data.all = read.csv("processed_data/data_all.csv")
data.all$treatment.no [data.all$Treatment %in% as.factor("ambient") ] = 1
data.all$treatment.no [data.all$Treatment %in% as.factor("elevated") ] = 2
tnc.partitioning = read.csv("processed_data/tnc_partitioning_data.csv")
source("R/check_biomass_wtc3.R")
View(biomass.sub)
biomass.sub = subset(data.biomass, Date %in% as.Date(c("2013-09-17","2014-05-26")))
biomass.sub$biomass = biomass.sub$RM + biomass.sub$LM + biomass.sub$WM
